name: HF-day-paper-deepseek

on:
  workflow_run:
    workflows: ["Paper_metadata_download"]
    types:
      - completed
  schedule:
    - cron: '30 4 * * *'  # 每天 UTC 4:30 (北京时间 12:30) 运行，确保在下载工作流之后
  workflow_dispatch:
    inputs:
      date:
        description: '指定要处理的历史数据日期 (YYYY-MM-DD格式)'
        required: false
        type: string

jobs:
  process:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y fonts-wqy-zenhei fonts-noto-cjk
    
    - name: Download workflow artifact
      if: github.event_name == 'workflow_run'
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.payload.workflow_run.id,
          });
          const matchArtifact = artifacts.data.artifacts.find((artifact) => {
            return artifact.name == "workflow-data"
          });
          if (matchArtifact) {
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            const fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/workflow-data.zip', Buffer.from(download.data));
          }
    
    - name: Set date
      id: set-date
      run: |
        if [ "${{ github.event.inputs.date }}" != "" ]; then
          echo "date=${{ github.event.inputs.date }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "workflow_run" ]; then
          # 尝试从上一个工作流的输出中获取日期
          if [ -f "workflow-data.zip" ]; then
            unzip workflow-data.zip
            if [ -f "date.txt" ]; then
              PREV_DATE=$(cat date.txt)
              echo "Found date from previous workflow: $PREV_DATE"
              echo "date=$PREV_DATE" >> $GITHUB_OUTPUT
            else
              echo "No date.txt found in workflow data"
              echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
            fi
          else
            echo "No workflow-data.zip found"
            echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          fi
        else
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        fi
    
    - name: Check for paper data
      id: check_data
      run: |
        DATE="${{ steps.set-date.outputs.date }}"
        echo "Processing date: $DATE"
        FILE="Paper_metadata_download/${DATE}.json"
        if [ -f "$FILE" ] && [ -s "$FILE" ]; then
          echo "Found paper data for ${DATE}"
          # 检查文件内容是否为有效的JSON数组且包含数据
          PAPER_COUNT=$(cat "$FILE" | jq '. | length')
          if [ "$PAPER_COUNT" -gt 0 ]; then
            echo "Found $PAPER_COUNT papers in data file"
            echo "has_data=true" >> $GITHUB_OUTPUT
            echo "file=${FILE}" >> $GITHUB_OUTPUT
            echo "paper_count=$PAPER_COUNT" >> $GITHUB_OUTPUT
          else
            echo "No valid papers found in data file"
            echo "has_data=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        else
          echo "No paper data found for ${DATE}"
          echo "has_data=false" >> $GITHUB_OUTPUT
          exit 0
        fi
    
    - name: Process papers
      if: steps.check_data.outputs.has_data == 'true'
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        PROCESS_DATE: ${{ steps.set-date.outputs.date }}
      run: |
        python HF-day-paper-deepseek.py --date $PROCESS_DATE
    
    - name: Commit and push if there are changes
      if: steps.check_data.outputs.has_data == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # 获取最新的更改
        git fetch origin main
        
        # 重置工作区
        git reset --hard origin/main
        
        # 添加所有更改
        git add HF-day-paper-deepseek/ posters/ stats/ images/ audio/ newsletters/
        
        # 检查是否有更改需要提交
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # 提交更改
        git commit -m "Update daily paper report for ${{ steps.set-date.outputs.date }}"
        
        # 推送更改（如果失败则重试）
        n=0
        until [ $n -ge 3 ]
        do
          git push origin main && break
          n=$[$n+1]
          if [ $n -lt 3 ]; then
            git fetch origin main
            git reset --hard origin/main
            git add HF-day-paper-deepseek/ posters/ stats/ images/ audio/ newsletters/
            git commit -m "Update daily paper report for ${{ steps.set-date.outputs.date }}"
          fi
          sleep 5
        done