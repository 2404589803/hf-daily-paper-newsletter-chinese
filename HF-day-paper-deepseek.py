import os
import json
import re
from datetime import datetime, timedelta, timezone
from openai import OpenAI
from tqdm import tqdm
from PIL import Image, ImageDraw, ImageFont
import requests
from io import BytesIO

# 配置DeepSeek API
BASE_URL = "https://api.deepseek.com"
API_KEY = os.environ.get("DEEPSEEK_API_KEY", "your_deepseek_api_key")  # 从环境变量获取API key

client = OpenAI(
    base_url=BASE_URL,
    api_key=API_KEY
)

# 获取当前UTC时间
current_utc_time = datetime.now(timezone.utc)
print(f"当前 UTC 日期和时间: {current_utc_time}")

# 将UTC时间转换为北京时间 (UTC+8)
beijing_timezone = timezone(timedelta(hours=8))
current_beijing_time = current_utc_time.astimezone(beijing_timezone)
print(f"当前北京时间和时间: {current_beijing_time}")

# 计算查询的日期(前一天)
yesterday_beijing = current_beijing_time - timedelta(days=1)
yesterday_str = yesterday_beijing.strftime('%Y-%m-%d')
print(f"查询的日期: {yesterday_str}")

def create_poster(results, date_str, output_folder):
    # 创建海报
    width = 1200
    height = 1600
    background_color = (255, 255, 255)
    text_color = (0, 0, 0)
    
    # 创建新图像
    image = Image.new('RGB', (width, height), background_color)
    draw = ImageDraw.Draw(image)
    
    # 加载字体
    try:
        title_font = ImageFont.truetype("C:\\Windows\\Fonts\\msyh.ttc", 40)
        content_font = ImageFont.truetype("C:\\Windows\\Fonts\\msyh.ttc", 24)
    except:
        title_font = ImageFont.load_default()
        content_font = ImageFont.load_default()
    
    # 绘制标题
    title = f"🤗 Hugging Face {date_str} 论文日报"
    title_bbox = draw.textbbox((0, 0), title, font=title_font)
    title_width = title_bbox[2] - title_bbox[0]
    draw.text(((width - title_width) // 2, 50), title, font=title_font, fill=text_color)
    
    # 绘制内容
    y = 150
    max_papers = 5  # 限制显示的论文数量
    
    for i, result in enumerate(results[:max_papers]):
        # 提取标题和摘要
        paper_info = result.get("paper", {})
        title = paper_info.get("title", "无标题")
        summary = paper_info.get("summary", "无摘要")
        
        # 绘制论文标题
        draw.text((50, y), f"{i+1}. {title}", font=content_font, fill=text_color)
        y += 40
        
        # 处理摘要文本换行
        words = summary.split()
        lines = []
        current_line = []
        
        for word in words:
            current_line.append(word)
            test_line = ' '.join(current_line)
            bbox = draw.textbbox((0, 0), test_line, font=content_font)
            if bbox[2] - bbox[0] > width - 100:  # 100是左右边距
                current_line.pop()
                lines.append(' '.join(current_line))
                current_line = [word]
        
        if current_line:
            lines.append(' '.join(current_line))
        
        # 绘制摘要（限制行数）
        max_lines = 8
        for line in lines[:max_lines]:
            draw.text((50, y), line, font=content_font, fill=text_color)
            y += 30
        
        y += 50  # 论文之间的间距
    
    # 添加底部信息
    footer = "Generated by DeepSeek"
    footer_bbox = draw.textbbox((0, 0), footer, font=content_font)
    footer_width = footer_bbox[2] - footer_bbox[0]
    draw.text(((width - footer_width) // 2, height - 50), footer, font=content_font, fill=text_color)
    
    # 保存图片
    os.makedirs(output_folder, exist_ok=True)
    output_path = os.path.join(output_folder, f"{date_str}_poster.png")
    image.save(output_path)
    print(f"海报已保存到：{output_path}")

def process_papers():
    # 读取元数据文件
    metadata_file = os.path.join('Paper_metadata_download', f"{yesterday_str}.json")
    if not os.path.exists(metadata_file):
        print(f"未找到元数据文件：{metadata_file}")
        return
        
    try:
        with open(metadata_file, 'r', encoding='utf-8') as f:
            papers_data = json.load(f)
            
        results = []
        # 使用tqdm显示进度条
        for paper_str in tqdm(papers_data, desc="处理论文"):
            # 解析paper字符串为字典
            paper_data = eval(paper_str)
            paper_info = paper_data.get("paper", {})
            
            if not paper_info:
                continue
                
            title = paper_info.get("title", "")
            summary = paper_info.get("summary", "")
            
            # 调用DeepSeek API进行翻译
            prompt = f"""请将以下论文标题和摘要翻译成中文，保持学术性和专业性：

标题：{title}

摘要：{summary}

请按以下格式输出：
标题：[中文标题]
摘要：[中文摘要]"""
            
            result = client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {
                        "role": "system",
                        "content": "你是一个专业的学术翻译助手。"
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                stream=False
            )
            
            # 保存结果
            results.append({
                "paper": paper_info,
                "translation": result.choices[0].message.content
            })
            
        # 创建输出目录
        output_folder = 'HF-day-paper-deepseek'
        os.makedirs(output_folder, exist_ok=True)
        
        # 保存翻译结果
        output_file = os.path.join(output_folder, f"{yesterday_str}_HF_deepseek_clean.json")
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=4)
        print(f"翻译结果已保存到：{output_file}")
        
        # 生成海报
        create_poster(results, yesterday_str, output_folder)
        
    except Exception as e:
        print(f"处理论文时发生错误：{e}")

if __name__ == "__main__":
    process_papers() 